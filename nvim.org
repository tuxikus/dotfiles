#+title: Neovim config
#+property: header-args :mkdirp yes

* Why neovim ü§ì
Currently I am using Emacs for almost everything (coding, git, journaling, media, configs, ... and even as my filesystem). Now I want to try to do some of these tasks in neovim, to see what parts of the vim/neovim workflow I can use and built into my daily Emacs workflow. So with this file I am trying to create a neovim config from scratch.

* init.lua
#+begin_src lua :tangle nvim/.config/nvim/init.lua
require("tuxikus")
#+end_src

* configs
** tuxikus/init.lua
:PROPERTIES:
:header-args: :tangle nvim/.config/nvim/lua/tuxikus/init.lua
:END:
*** lazy
#+begin_src lua
require("tuxikus.lazy")
require("lazy").setup("tuxikus.plugins")
#+end_src
*** load custom configs
#+begin_src lua
require("tuxikus.keys")
require("tuxikus.options")
#+end_src
*** lsp stuff
#+begin_src lua
require'lspconfig'.pylsp.setup{}
#+end_src
** keys
:PROPERTIES:
:header-args: :tangle nvim/.config/nvim/lua/tuxikus/keys.lua
:END:
Lets use some good mnemonic keybindings üßô‚Äç‚ôÇÔ∏è
*** buffer management
#+begin_src lua
#+end_src
*** window management
#+begin_src lua
vim.keymap.set('n', '<leader>ws', "<CMD>split<CR>", { desc = "Split window horizonally" })
vim.keymap.set('n', '<leader>wv', "<CMD>vsplit<CR>", { desc = "Split window vertically" })
vim.keymap.set('n', '<leader>wq', "<CMD>q<CR>", { desc = "Close window" })
vim.keymap.set('n', '<leader>wd', "<CMD>q<CR>", { desc = "Close window" })
#+end_src

*** project management
#+begin_src lua
#+end_src
*** dired, ehh... netrw üòÖ
#+begin_src lua
vim.keymap.set('n', '<leader>.', "<CMD>Explore<CR>", { desc = "Netrw" })
#+end_src
*** telescope
#+begin_src lua
local builtin = require('telescope.builtin')
vim.keymap.set('n', '<leader><leader>', builtin.find_files, {})
vim.keymap.set('n', '<leader>/', builtin.live_grep, {})
vim.keymap.set('n', '<leader>,', builtin.buffers, {})
vim.keymap.set('n', '<leader>hf', builtin.help_tags, {})
#+end_src
** options
:PROPERTIES:
:header-args: :tangle nvim/.config/nvim/lua/tuxikus/options.lua
:END:
*** theme
#+begin_src lua
vim.cmd "colorscheme vim"
#+end_src
*** relative line numbers
#+begin_src lua
vim.opt.relativenumber = true
#+end_src
* plugins
** lazy
- [[https://github.com/folke/lazy.nvim][Github link]]

#+begin_src lua :tangle nvim/.config/nvim/lua/tuxikus/lazy.lua
-- Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
  if vim.v.shell_error ~= 0 then
    vim.api.nvim_echo({
      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
      { out, "WarningMsg" },
      { "\nPress any key to exit..." },
    }, true, {})
    vim.fn.getchar()
    os.exit(1)
  end
end
vim.opt.rtp:prepend(lazypath)

-- Make sure to setup `mapleader` and `maplocalleader` before
-- loading lazy.nvim so that mappings are correct.
-- This is also a good place to setup other settings (vim.opt)
vim.g.mapleader = " "
vim.g.maplocalleader = "\\"
#+end_src

** which-key
- [[https://github.com/folke/which-key.nvim][Github link]]

#+begin_src lua :tangle nvim/.config/nvim/lua/tuxikus/plugins/which-key.lua
return {
  "folke/which-key.nvim",
  event = "VeryLazy",
  opts = {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  },
  keys = {
    {
      "<leader>?",
      function()
        require("which-key").show({ global = false })
      end,
      desc = "Buffer Local Keymaps (which-key)",
    },
  },
}
#+end_src

** lspconfig
- [[https://github.com/neovim/nvim-lspconfig][Github link]]

#+begin_src lua :tangle  nvim/.config/nvim/lua/tuxikus/plugins/lspconfig.lua
return {
  "neovim/nvim-lspconfig",
}
#+end_src

** telescope
- [[https://github.com/nvim-telescope/telescope.nvim][Github link]]

#+begin_src lua :tangle nvim/.config/nvim/lua/tuxikus/plugins/telescope.lua
return {
    'nvim-telescope/telescope.nvim', tag = '0.1.8',
    dependencies = { 'nvim-lua/plenary.nvim' }
}
#+end_src

** harpoon2
- [[https://github.com/ThePrimeagen/harpoon/tree/harpoon2][Github link]]

#+begin_src lua :tangle nvim/.config/nvim/lua/tuxikus/plugins/harpoon2.lua
return {
    "ThePrimeagen/harpoon",
    branch = "harpoon2",
    dependencies = { "nvim-lua/plenary.nvim" }
}
#+end_src
